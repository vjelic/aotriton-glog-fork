{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "c621a0eb-956e-3648-ba9d-a1fb7dfeb4fb",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "63f547fb-32ba-341d-beb9-c426d89744c3",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "ce092a23-87e7-3eb7-9944-d2e3ff439fa2",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "a90921c7-d025-340c-af92-f45eaa1d0d91",
              "name": "resources.rules.missing-dnf-clean-all",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-dnf-clean-all"
              },
              "fullDescription": {
                "text": "This dnf command does not end with '&& dnf clean all'. Running 'dnf clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "This dnf command does not end with '&& dnf clean all'. Running 'dnf clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This dnf command does not end with '&& dnf clean all'. Running 'dnf clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3038](https://github.com/hadolint/hadolint/wiki/DL3038)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-dnf-clean-all"
                ]
              }
            },
            {
              "id": "35ca9e39-30af-3419-a564-0c1cc8564718",
              "name": "resources.rules.code-after-unconditional-return",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.code-after-unconditional-return"
              },
              "fullDescription": {
                "text": "code after return statement will not be executed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "code after return statement will not be executed\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "code after return statement will not be executed\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.code-after-unconditional-return"
                ]
              }
            },
            {
              "id": "ef62d13a-2db5-3546-8130-471cefc87e51",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "d820af31-e975-36ca-bca5-6e7d241d4da8",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "4df8d8c8-d27b-3e8f-8b88-7629e92cfa46",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "da308cf3-e524-3257-9e67-ab39b19fd57b",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "b3a8fb76-b247-3f49-8a6d-fe05cbaedf60",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "8af425bd-2f6e-3f02-ad98-d8416fe20c23",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "db7ea162-1c0d-3d4a-8da7-7dc4b61688fd",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "0239bf03-e280-3178-bc80-447d9a00e658",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "8953bb35-fac5-387e-9f30-d3f8f91d408a",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "e5e2c346-4857-35d1-af03-5aa3e6aabb23",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "ad0b08ad-e705-3ade-8266-95626e7fc603",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "7f5e9f62-e6a4-3f12-972e-2775acfd3567",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "56909997-2de1-3de2-8bea-81fb6bf8bbc7",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "c099f8ca-3beb-37a1-af95-ab511715d9b4",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "e703ccd1-5520-3633-b291-86df9a309c6b",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "0143be2f-43d3-3ad1-a4d5-f1611920bfc4",
              "name": "python.lang.security.dangerous-globals-use.dangerous-globals-use",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.dangerous-globals-use.dangerous-globals-use"
              },
              "fullDescription": {
                "text": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.dangerous-globals-use.dangerous-globals-use",
              "help": {
                "text": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.dangerous-globals-use.dangerous-globals-use)\n - [https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186](https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.dangerous-globals-use.dangerous-globals-use"
                ]
              }
            },
            {
              "id": "41276887-abe5-3cf0-9a6d-53a87d9feeaa",
              "name": "resources.rules.code-after-unconditional-return",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.code-after-unconditional-return"
              },
              "fullDescription": {
                "text": "code after return statement will not be executed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "code after return statement will not be executed\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "code after return statement will not be executed\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.code-after-unconditional-return"
                ]
              }
            },
            {
              "id": "90c4a5b2-d4d5-3d53-86f7-c571c69aacf9",
              "name": "resources.rules.open-never-closed",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.open-never-closed"
              },
              "fullDescription": {
                "text": "file object opened without corresponding close"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "file object opened without corresponding close\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "file object opened without corresponding close\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.open-never-closed"
                ]
              }
            },
            {
              "id": "819fdebb-21dc-3630-bee1-22377002326e",
              "name": "resources.rules.open-never-closed",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.open-never-closed"
              },
              "fullDescription": {
                "text": "file object opened without corresponding close"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "file object opened without corresponding close\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "file object opened without corresponding close\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.open-never-closed"
                ]
              }
            },
            {
              "id": "f2088189-77c2-3fe7-ae03-fd9eeca239a8",
              "name": "resources.rules.open-never-closed",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.open-never-closed"
              },
              "fullDescription": {
                "text": "file object opened without corresponding close"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "file object opened without corresponding close\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "file object opened without corresponding close\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.open-never-closed"
                ]
              }
            },
            {
              "id": "993eb4a8-2222-3584-b53b-c8ba60dbee1a",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "bf576f50-6e3c-3f2d-b405-f9f4af110f4e",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "5b6edbd8-8cb2-3083-a2db-3fc7f102ea0f",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "2a20a751-31ed-38e9-a2b9-fc1b10c83b4d",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "c945ec4f-81b4-3a28-98b5-003b6cdd2acc",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "97256865-f3e1-3560-ab5e-d5382b7a8e36",
              "name": "resources.rules.code-after-unconditional-return",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.code-after-unconditional-return"
              },
              "fullDescription": {
                "text": "code after return statement will not be executed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "code after return statement will not be executed\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "code after return statement will not be executed\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.code-after-unconditional-return"
                ]
              }
            },
            {
              "id": "1bc958fb-541c-3af0-bafa-19ba4fde27f7",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "338f9af4-fe46-3592-9310-95ab2e8656d2",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "c9c47ca3-c02d-36cc-b142-54af1436c077",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "63f347f3-6f00-3223-b8cb-215a1be117f9",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "9ced507a-98b7-399d-88c2-bd923d60206c",
              "name": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query"
              },
              "fullDescription": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "help": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected possible formatted SQL query. Use parameterized queries instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query)\n - [https://stackoverflow.com/questions/775296/mysql-parameterized-queries](https://stackoverflow.com/questions/775296/mysql-parameterized-queries)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.formatted-sql-query.formatted-sql-query"
                ]
              }
            },
            {
              "id": "67136280-c9b8-30d1-b748-843a2e768c1b",
              "name": "resources.rules.unquoted-csv-writer",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.unquoted-csv-writer"
              },
              "fullDescription": {
                "text": "Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://affinity-it-security.com/how-to-prevent-csv-injection/](https://affinity-it-security.com/how-to-prevent-csv-injection/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.unquoted-csv-writer"
                ]
              }
            },
            {
              "id": "ff41d2b7-a10c-3f69-9718-d910af2b60ee",
              "name": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query"
              },
              "fullDescription": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "help": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected possible formatted SQL query. Use parameterized queries instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query)\n - [https://stackoverflow.com/questions/775296/mysql-parameterized-queries](https://stackoverflow.com/questions/775296/mysql-parameterized-queries)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.formatted-sql-query.formatted-sql-query"
                ]
              }
            },
            {
              "id": "60e524bd-7e71-31b0-865c-4a12aa905518",
              "name": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query"
              },
              "fullDescription": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "help": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected possible formatted SQL query. Use parameterized queries instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query)\n - [https://stackoverflow.com/questions/775296/mysql-parameterized-queries](https://stackoverflow.com/questions/775296/mysql-parameterized-queries)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.formatted-sql-query.formatted-sql-query"
                ]
              }
            },
            {
              "id": "c8e6cf6a-8be9-36fb-88a4-d56035e177aa",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "680b14fe-4895-3112-b022-9043cd5cfcd3",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "af4ed079-55c1-36e9-a17b-f51c2dbe0d6b",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "a5d4c475-b8d5-3831-91b2-115081cc2907",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "21941bb2-1a08-33be-9d5e-2fa02ef3b027",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "c71289a2-088e-3c63-9da7-78b5946dd8ef",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "741f47d1-3730-3214-b1ab-8772e147cc55",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "0197f4ce-b8f4-3d6f-864c-56766424a7be",
              "name": "python.lang.security.dangerous-globals-use.dangerous-globals-use",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.dangerous-globals-use.dangerous-globals-use"
              },
              "fullDescription": {
                "text": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.dangerous-globals-use.dangerous-globals-use",
              "help": {
                "text": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.dangerous-globals-use.dangerous-globals-use)\n - [https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186](https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.dangerous-globals-use.dangerous-globals-use"
                ]
              }
            },
            {
              "id": "9516c8a1-e896-3e34-99f3-82ef98a405e6",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "3c4b57b3-4d68-3248-af6c-5fd06a957cc2",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "f2f90f87-df90-3a8e-99c1-2e151a744d81",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "a1297009-fb01-38b4-9e93-aab5fe4e4fb9",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "de4315b4-9052-38c3-8e49-5dd98d23fa42",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "4b10563a-a6a6-3c40-8396-06d20c0991d0",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "9c6a566c-092f-34cd-949b-01693edcf5cd",
              "name": "resources.rules.code-after-unconditional-return",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.code-after-unconditional-return"
              },
              "fullDescription": {
                "text": "code after return statement will not be executed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "code after return statement will not be executed\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "code after return statement will not be executed\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.code-after-unconditional-return"
                ]
              }
            },
            {
              "id": "ecb59fe3-6f7b-3711-8fbf-1bbfa77a2eb1",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "77e19c73-4cc8-3a9d-af50-f91742b4048a",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "1fa11db5-d79a-3534-aa05-ccd70f4ee0be",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "ad16a31b-12b2-3637-ad97-e46f873fad75",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "d1d93400-f810-32ea-8c5a-0c363e99c78d",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "c8d655c9-88f0-3b03-bffd-6b6f04a458b5",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "e9097d55-6079-360d-b1fb-937d037958c0",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "93c038f2-7477-388e-8b49-0c9b748e819e",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "abbb72b7-e178-33cf-9c2e-e8113fbca646",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "cb509f3c-c5da-36b2-b789-0774ca93f655",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "8e479fcf-83ac-3cfa-8e5a-e57db79f0de9",
              "name": "resources.rules.pass-body-fn",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pass-body-fn"
              },
              "fullDescription": {
                "text": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pass-body-fn"
                ]
              }
            },
            {
              "id": "0a1cd498-7480-38d3-aea3-8ed3fec6d2ce",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "1e7421a4-2bd6-352c-bced-134aca0195e4",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "4ff5eac6-84b8-398c-af29-bcbeeecc0053",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "84f5cd1f-21f5-3783-80e1-019e247311f9",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "0d0e0c12-a9c1-366c-8a25-e105f80e9ca6",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "2c3e357c-7783-380a-973b-f1269a9f8113",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "ad5cf389-57a4-3a1b-bed2-02456ab0c8ff",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "8a6bdd85-a20e-366b-b386-564b7b55062d",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "964afee2-c411-3cd3-9d4c-344825ab0b97",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "826a352c-01d7-3eef-8601-75ea359d3e01",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "744dd55f-68ff-3e24-b3b2-da33e98a938b",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "7dd39412-4f3a-32b0-b358-6445f258af24",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "b1d95373-78cb-3a3e-9ab1-5ae12d858a22",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "33cd1dd1-1052-3395-963c-8668723d1c16",
              "name": "resources.rules.raptor-memory-address-exposure",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-memory-address-exposure"
              },
              "fullDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/200](https://cwe.mitre.org/data/definitions/200)\n - [https://cwe.mitre.org/data/definitions/209](https://cwe.mitre.org/data/definitions/209)\n - [https://cwe.mitre.org/data/definitions/497](https://cwe.mitre.org/data/definitions/497)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-memory-address-exposure"
                ]
              }
            },
            {
              "id": "399d63c9-4e52-387f-81e3-5fd446bbaffd",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "c621a0eb-956e-3648-ba9d-a1fb7dfeb4fb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bindings/hipmemory.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 21,
                  "endLine": 27,
                  "endColumn": 46,
                  "snippet": {
                    "text": "      last_state_ = hipMalloc(&memory_, size);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3d8b1b5cfd3069af06d6a18b6ccec07d6931f86d67ffcba2e0f62ea739f21ad05433f2fa5a85d19084a888551ba6f96ea31c3ab18d89c028f86cb5d33bf065f5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "63f547fb-32ba-341d-beb9-c426d89744c3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bindings/lazy_tensor/dq_acc.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 3,
                  "endLine": 48,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  delete ctx;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "368875fbf25e785f789f31cd273d9e880fbc0b185dc564bf17faa6510d50139ec2e78030d923dcd84996afa318dd9ce0e89aa37c898537888cbf0fdcee478d38_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ce092a23-87e7-3eb7-9944-d2e3ff439fa2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include/aotriton/cpp_tune.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 10,
                  "endLine": 21,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  size_t image_size = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2947a0e6bc71a222e0dcfc8e00c6b5c34e02e09e5e25d4f2a12dc41eb9e1b5458a88692e0288c188f68876b7aaa9e26724ceadf3fcdc6672cfb4446245958fa5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a90921c7-d025-340c-af92-f45eaa1d0d91",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This dnf command does not end with '&& dnf clean all'. Running 'dnf clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockerfile/manylinux_2_28.Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 5,
                  "endLine": 3,
                  "endColumn": 16,
                  "snippet": {
                    "text": "RUN dnf install -y gcc-toolset-13 python3.11 python3.11-devel \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9ee5e3577754d15d98c852e257d0cc713bce7ca0fabbadd124260a9f17d5ea135101a524bd87a6bef13770dee41d7d9a2c72c35ae1a4fc691461784098ac0580_0"
          },
          "properties": {}
        },
        {
          "ruleId": "35ca9e39-30af-3419-a564-0c1cc8564718",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "code after return statement will not be executed"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tritonsrc/_common_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 623,
                  "startColumn": 9,
                  "endLine": 631,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        return torch.rand(*dims, dtype=dtype, device=device).transpose(1, 2)\n        '''\n        def _size(seqlen):\n            return (seqlen, num_heads, head_dim) if not packed else (seq_len[i], 3 * num_heads * head_dim)\n\n        return torch.nested.nested_tensor([\n            torch.rand(_size(seqlen), device=device, dtype=dtype, requires_grad=True)\n            for seqlen in seqlens])\n        '''"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1d0711dfdd483efd6806a2193fbf619bd481e43de53ca76b9275df4cc0295385215f2042bdf7d8b0d538ed2c6bd656fc90213e6f5d9547e6bcff8cb98ce7317b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ef62d13a-2db5-3546-8130-471cefc87e51",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tritonsrc/_common_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 699,
                  "startColumn": 17,
                  "endLine": 699,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                return torch.float16"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4d6396cd42bc1fad4bbc8dae7368fd1631feac4bb4d2a0e6bc7ae0fbe49430d85a630c83108f1b53442873388efe6a4760a6993952e9701a8165926d230a9c9d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d820af31-e975-36ca-bca5-6e7d241d4da8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tritonsrc/_common_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 9,
                  "endLine": 31,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        torch.save(t, tensor_bytes)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6ee13a490cdd65a1f1f812abae241d536c48d58e2d0601d1b15142cc01e79859d9be2ba201636832b9389d6c3aa73d527712914fb907c95fb2633a8e626531c2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4df8d8c8-d27b-3e8f-8b88-7629e92cfa46",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tritonsrc/_common_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 701,
                  "startColumn": 17,
                  "endLine": 701,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                return torch.bfloat16"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4d6396cd42bc1fad4bbc8dae7368fd1631feac4bb4d2a0e6bc7ae0fbe49430d85a630c83108f1b53442873388efe6a4760a6993952e9701a8165926d230a9c9d_1"
          },
          "properties": {}
        },
        {
          "ruleId": "da308cf3-e524-3257-9e67-ab39b19fd57b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tritonsrc/_common_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 709,
                  "startColumn": 13,
                  "endLine": 709,
                  "endColumn": 68,
                  "snippet": {
                    "text": "            return torch.tensor(d[n], dtype=cast_to, device=device)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4d6396cd42bc1fad4bbc8dae7368fd1631feac4bb4d2a0e6bc7ae0fbe49430d85a630c83108f1b53442873388efe6a4760a6993952e9701a8165926d230a9c9d_3"
          },
          "properties": {}
        },
        {
          "ruleId": "b3a8fb76-b247-3f49-8a6d-fe05cbaedf60",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tritonsrc/_common_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 703,
                  "startColumn": 17,
                  "endLine": 703,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                return torch.float32"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4d6396cd42bc1fad4bbc8dae7368fd1631feac4bb4d2a0e6bc7ae0fbe49430d85a630c83108f1b53442873388efe6a4760a6993952e9701a8165926d230a9c9d_2"
          },
          "properties": {}
        },
        {
          "ruleId": "8af425bd-2f6e-3f02-ad98-d8416fe20c23",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tritonsrc/_common_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 713,
                  "startColumn": 13,
                  "endLine": 713,
                  "endColumn": 89,
                  "snippet": {
                    "text": "            return tuple([load(f'{prefix}{n}{suffix}', cast_to=cast_to) for n in 'qkv'])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4d6396cd42bc1fad4bbc8dae7368fd1631feac4bb4d2a0e6bc7ae0fbe49430d85a630c83108f1b53442873388efe6a4760a6993952e9701a8165926d230a9c9d_4"
          },
          "properties": {}
        },
        {
          "ruleId": "db7ea162-1c0d-3d4a-8da7-7dc4b61688fd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tritonsrc/performance_backward.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 30,
                  "endLine": 28,
                  "endColumn": 36,
                  "snippet": {
                    "text": "d_heads = list(map(lambda x: int(x), d_heads.split(',')))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "957003bdd15623d4e93a715b917a67e7fb60abc6aa6796b16bd75f6efc31aa78d2558242f4463284d5a20eb9c6b69123f8325ce11ce75473b1ba18cae88750e5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0239bf03-e280-3178-bc80-447d9a00e658",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tritonsrc/performance_backward.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 27,
                  "endLine": 32,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    n_ctx = map(lambda x: int(x), n_ctx.split(','))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "957003bdd15623d4e93a715b917a67e7fb60abc6aa6796b16bd75f6efc31aa78d2558242f4463284d5a20eb9c6b69123f8325ce11ce75473b1ba18cae88750e5_1"
          },
          "properties": {}
        },
        {
          "ruleId": "8953bb35-fac5-387e-9f30-d3f8f91d408a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tritonsrc/performance_backward.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 29,
                  "endLine": 33,
                  "endColumn": 35,
                  "snippet": {
                    "text": "X_VALS = list(map(lambda x: 2 ** x, n_ctx))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "957003bdd15623d4e93a715b917a67e7fb60abc6aa6796b16bd75f6efc31aa78d2558242f4463284d5a20eb9c6b69123f8325ce11ce75473b1ba18cae88750e5_2"
          },
          "properties": {}
        },
        {
          "ruleId": "e5e2c346-4857-35d1-af03-5aa3e6aabb23",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tritonsrc/performance_forward.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 27,
                  "endLine": 28,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    n_ctx = map(lambda x: int(x), n_ctx.split(','))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e31c0b60bb3f60b7f2f88131c3eba5dbb881169d84902a88df0729f35018751e8d02a6a07aae56c3e59defb7038ee2f9bd190c7517e417e3e4135aaf987d022f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ad0b08ad-e705-3ade-8266-95626e7fc603",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tritonsrc/performance_forward.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 29,
                  "endLine": 29,
                  "endColumn": 35,
                  "snippet": {
                    "text": "X_VALS = list(map(lambda x: 2 ** x, n_ctx))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e31c0b60bb3f60b7f2f88131c3eba5dbb881169d84902a88df0729f35018751e8d02a6a07aae56c3e59defb7038ee2f9bd190c7517e417e3e4135aaf987d022f_1"
          },
          "properties": {}
        },
        {
          "ruleId": "7f5e9f62-e6a4-3f12-972e-2775acfd3567",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'Popen' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tritonsrc/tune_flash.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 21,
                  "endLine": 29,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        self._dbp = subprocess.Popen(dbargs,\n                                     stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n                                     text=True)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4fc5a0e01577788f1a60fd49c4a417a8c3edbc44f18c6765d83f9ed2b316bd789ad60fd807cef90e494f57e1e0e3cd4fdb78960d5b78632d54a8a527835d9c1b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "56909997-2de1-3de2-8bea-81fb6bf8bbc7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tritonsrc/tune_flash.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 21,
                  "endLine": 108,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                    time.sleep(0.1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13dd75db81ef5c58f40f35804e804908db61a92de9dc38fe1cb32aba089e0b01954f66c8fc12c9a9c36438379805aaa02721420c7eebd47268cf0742250944ce_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c099f8ca-3beb-37a1-af95-ab511715d9b4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tritonsrc/tune_flash.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 21,
                  "endLine": 117,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                    time.sleep(0.1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13dd75db81ef5c58f40f35804e804908db61a92de9dc38fe1cb32aba089e0b01954f66c8fc12c9a9c36438379805aaa02721420c7eebd47268cf0742250944ce_1"
          },
          "properties": {}
        },
        {
          "ruleId": "e703ccd1-5520-3633-b291-86df9a309c6b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2python/compile.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 9,
                  "endLine": 69,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        exec(exec_string, globals()) # importlib code path miss things"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7d76f4b5403d4e283423d524832a476cc464ae43066f8d8c7faa9af05e9026e6a07d389eef8aa7ce17d591b562511eebbc32074583a8e5458e55f49664b630ce_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0143be2f-43d3-3ad1-a4d5-f1611920bfc4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2python/compile.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 15,
                  "endLine": 72,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        mod = globals()[arg_path.stem]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "997dd504e6f7c6dc1cc43f78f60d887f7ae69a5d3de021e403230ce0aa9ca8357479e5d4efb9a048aeecb376ab8c9c3140062819cb025ba61ee43dabf8cd5aa9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "41276887-abe5-3cf0-9a6d-53a87d9feeaa",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "code after return statement will not be executed"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2python/generate_shim.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 9,
                  "endLine": 129,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        return\n        yield"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "73b5c411e012998839205dab053f4229b1918cb1ad8419fa5b8720473e76d5d365b2294c5f95ed829dca123bb7e8ceaeafc4eb0cb5b6e567583798fbfe2fef06_0"
          },
          "properties": {}
        },
        {
          "ruleId": "90c4a5b2-d4d5-3d53-86f7-c571c69aacf9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "file object opened without corresponding close"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2python/generate_shim.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 13,
                  "endLine": 198,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            f = open(self._build_dir / 'Bare.shim', 'w')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b3f01a5c94aa427d7369ffb7ad350a977a1531ffbc7211f93da693e0f9610a44948e7f8657eae1f52dbdede90bfa128ee6f487b42500cdc6d8b2a669c2307d12_0"
          },
          "properties": {}
        },
        {
          "ruleId": "819fdebb-21dc-3630-bee1-22377002326e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "file object opened without corresponding close"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2python/generate_shim.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 13,
                  "endLine": 200,
                  "endColumn": 61,
                  "snippet": {
                    "text": "            f = open(self._build_dir / 'Makefile.shim', 'w')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b3f01a5c94aa427d7369ffb7ad350a977a1531ffbc7211f93da693e0f9610a44948e7f8657eae1f52dbdede90bfa128ee6f487b42500cdc6d8b2a669c2307d12_1"
          },
          "properties": {}
        },
        {
          "ruleId": "f2088189-77c2-3fe7-ae03-fd9eeca239a8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "file object opened without corresponding close"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2python/generate_shim.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 9,
                  "endLine": 201,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        arf = open(self._build_dir / 'ar.txt', 'w')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7b3d641e25c2f5e46492f28999c2388f40853096a5db4d25914b1ff2eef6a741686300fe14f511386d1f0252860fbe747926e8bc479ee1ac2beabfbd7261bfa3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "993eb4a8-2222-3584-b53b-c8ba60dbee1a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2python/kernel_desc.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 65,
                  "endLine": 126,
                  "endColumn": 82,
                  "snippet": {
                    "text": "        self._func_meta = sorted(self._func_meta, key=lambda m: m.first_apperance)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "62fb9480e8f1672a14347d5263d3e287f74038b407aeac95f217f0bf09710881e8cd5f48c634ad01eddb725bdbf26f736cc4ed0389b718f16b7573ef1d768064_0"
          },
          "properties": {}
        },
        {
          "ruleId": "bf576f50-6e3c-3f2d-b405-f9f4af110f4e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2python/kernel_desc.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 66,
                  "endLine": 135,
                  "endColumn": 81,
                  "snippet": {
                    "text": "        self._perf_meta = sorted(self._perf_meta, key=lambda m : m.param_cc_size, reverse=True)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "62fb9480e8f1672a14347d5263d3e287f74038b407aeac95f217f0bf09710881e8cd5f48c634ad01eddb725bdbf26f736cc4ed0389b718f16b7573ef1d768064_1"
          },
          "properties": {}
        },
        {
          "ruleId": "5b6edbd8-8cb2-3083-a2db-3fc7f102ea0f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2python/kernel_desc.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 17,
                  "endLine": 251,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                exit()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c93361890ce366d0df9e4e2aa79a2c7eaa13e73c441a994e2863dc172d75b1a389cbe378f403e797821e098517e53627ccd123614556edb214dc3d36abdcb045_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2a20a751-31ed-38e9-a2b9-fc1b10c83b4d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2python/rules/flash/attn_fwd.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 35,
                  "endLine": 21,
                  "endColumn": 79,
                  "snippet": {
                    "text": "_IF_DROPOUT = lambda elsechoice : [CC('ENABLE_DROPOUT', False, 0, elsechoice)]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e46b7d44f91fa39740cc0cfe27fc52a5b1df817700547b0e99ca7d128f407e0a38746aeef80a08fe2733f3b45bd819971b461bf56c3d8c4277a8d1281da6c5ac_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c945ec4f-81b4-3a28-98b5-003b6cdd2acc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2python/rules/flash/attn_fwd.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 46,
                  "endLine": 22,
                  "endColumn": 105,
                  "snippet": {
                    "text": "_IF_CAUSAL = lambda elsechoice, dtype=None : [CC('CAUSAL_TYPE', False, 0, elsechoice, else_dtype=dtype)]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e46b7d44f91fa39740cc0cfe27fc52a5b1df817700547b0e99ca7d128f407e0a38746aeef80a08fe2733f3b45bd819971b461bf56c3d8c4277a8d1281da6c5ac_1"
          },
          "properties": {}
        },
        {
          "ruleId": "97256865-f3e1-3560-ab5e-d5382b7a8e36",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "code after return statement will not be executed"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2python/rules/flash/attn_fwd.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 9,
                  "endLine": 170,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        return\n        '''\n        # tuned_kernel['BLOCK_M'] //= 2\n        # tuned_kernel['BLOCK_N'] //= 2\n        square = min(tuned_kernel['BLOCK_M'], tuned_kernel['BLOCK_N'])\n        tuned_kernel['BLOCK_M'] = square // 2\n        tuned_kernel['BLOCK_N'] = square // 2\n        tuned_kernel['pre_load_v'] = False\n        tuned_kernel['waves_per_eu'] = 0\n        compiler_options['num_stages'] = 2\n        '''"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "06058dad04be9bbe860ae451cca9dbf71e2e4791abffe68aae112723144f91a1b3c6962e817ff7fcfb3842968ff8a9f77b796e61ef5ce3b99989338f8ae0c8bd_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1bc958fb-541c-3af0-bafa-19ba4fde27f7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2python/rules/flash/bwd_kernel_dk_dv.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 32,
                  "endLine": 47,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    match_fwd = lambda aname : get_possible_choices(attn_fwd, aname)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "00b5afd1699ae123232810528246338241532c1c178f031927387ed19b142fee1c2a403396be4335f480cb161b842ba3917afa449ca2cac1783b9848d8dcb1ca_0"
          },
          "properties": {}
        },
        {
          "ruleId": "338f9af4-fe46-3592-9310-95ab2e8656d2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2python/rules/flash/bwd_kernel_dq.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 32,
                  "endLine": 48,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    match_fwd = lambda aname : get_possible_choices(attn_fwd, aname)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8165f7b31ee42d58fac0b9b9659c2db58a41463e3713689a4512442100d896765ebd72fcd9716839ab59a65bea60a5deda11d8020b8a59ce6337f556554febdb_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c9c47ca3-c02d-36cc-b142-54af1436c077",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2python/rules/flash/bwd_kernel_dq.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 31,
                  "endLine": 49,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    match_kv = lambda aname : get_possible_choices(bwd_kernel_dk_dv, aname)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8165f7b31ee42d58fac0b9b9659c2db58a41463e3713689a4512442100d896765ebd72fcd9716839ab59a65bea60a5deda11d8020b8a59ce6337f556554febdb_1"
          },
          "properties": {}
        },
        {
          "ruleId": "63f347f3-6f00-3223-b8cb-215a1be117f9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2python/rules/flash/bwd_kernel_fuse.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 32,
                  "endLine": 49,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    match_fwd = lambda aname : get_possible_choices(attn_fwd, aname)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "44f974b9c3253a86288a2b171f58094aa199f81934aa04d684eb5667b274ba0f5fa4ea87bf858b325d507c69e8634137156ec6b6e299209a2a906a4ca2021aec_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9ced507a-98b7-399d-88c2-bd923d60206c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected possible formatted SQL query. Use parameterized queries instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2python/sqlite_tuning_database.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 9,
                  "endLine": 48,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        cursor.execute(f\"SELECT * FROM {self._table_name};\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "174d22c10e8d8ebf1effe7f351227118e79f6e606060a0b249e71dbf963a89e6ea0af8a1c3759807ce94d3a3ec7c8e1ddf5a8b2d8d1a097c2999b3327cb331f8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "67136280-c9b8-30d1-b748-843a2e768c1b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2python/table_tool.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 22,
                  "endLine": 346,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            writer = csv.writer(file)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3c4429b562a511d15b1d290e67b4f4904e9ebd1c3296e181ae4cd64419b96249b318e5bb0b06946f3fe4a0116c305d98e81ad5e818a2885fc6d3aee7cb7b5ea7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ff41d2b7-a10c-3f69-9718-d910af2b60ee",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected possible formatted SQL query. Use parameterized queries instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2python/tuning_database.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 15,
                  "endLine": 101,
                  "endColumn": 118,
                  "snippet": {
                    "text": "        tup = self._conn.execute(f\"SELECT name FROM sqlite_master WHERE type='table' AND name='{self._table_name}';\").fetchone()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3a7068923d1c45ecc1a81266fa2653bc39ffc8744e5380ed401a8dbbff9b32953bb9a9b2970b448d09e734b1e80edcaf527574321aeaf02c4b44c9dc08f36b83_0"
          },
          "properties": {}
        },
        {
          "ruleId": "60e524bd-7e71-31b0-865c-4a12aa905518",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected possible formatted SQL query. Use parameterized queries instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2python/tuning_database.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 15,
                  "endLine": 104,
                  "endColumn": 82,
                  "snippet": {
                    "text": "        res = self._conn.execute(f\"SELECT DISTINCT gpu FROM {self._table_name};\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3a7068923d1c45ecc1a81266fa2653bc39ffc8744e5380ed401a8dbbff9b32953bb9a9b2970b448d09e734b1e80edcaf527574321aeaf02c4b44c9dc08f36b83_1"
          },
          "properties": {}
        },
        {
          "ruleId": "c8e6cf6a-8be9-36fb-88a4-d56035e177aa",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2src/packed_kernel.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 21,
                  "endLine": 154,
                  "endColumn": 58,
                  "snippet": {
                    "text": "      auto rbytes = read(fd, inbuf, AOTRITON_LZMA_BUFSIZ);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b19bf0057983eefcfa0b5da708a56281fc59312bf3ab06c8499e8744d0601cc149dc76825c9ed69f4744c5b242b9db5925ed5082dc7fe6f4757af65ee6747849_0"
          },
          "properties": {}
        },
        {
          "ruleId": "680b14fe-4895-3112-b022-9043cd5cfcd3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2src/triton_kernel.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 22,
                  "endLine": 156,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  const unsigned int errbufsize = 8192;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9400293946bc182d92c781efebdedd589c9e73efdee3392be79e9538b4ce7162b26fc6ac3c52ff79c7bc0b30921870525f0c970ecac968b74b229b62becf40f8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "af4ed079-55c1-36e9-a17b-f51c2dbe0d6b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v2src/triton_kernel.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 22,
                  "endLine": 157,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  const unsigned int logbufsize = 8192;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5e30caf75114d98dbaf2b45a75458d9077b318e2f73b6dce6c54a340ca5bf2a9e62298d95241c1abe058c8bbe2c54c40e44b6006cfafe0f71b7a8ff57d2f2f41_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a5d4c475-b8d5-3831-91b2-115081cc2907",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/codegen/autotune.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 29,
                  "endLine": 51,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                            return False"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7ff5c7cccf02177b68bbf174719292e2164379421bbcf7ca28df3bbbbe258bcca4fab2b93aad2025ea3a2f68bb1a55c33d80bd58e97dc71c6168ab8976e67b6b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "21941bb2-1a08-33be-9d5e-2fa02ef3b027",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/codegen/autotune.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 29,
                  "endLine": 54,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                            return False"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7ff5c7cccf02177b68bbf174719292e2164379421bbcf7ca28df3bbbbe258bcca4fab2b93aad2025ea3a2f68bb1a55c33d80bd58e97dc71c6168ab8976e67b6b_1"
          },
          "properties": {}
        },
        {
          "ruleId": "c71289a2-088e-3c63-9da7-78b5946dd8ef",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/codegen/autotune.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 29,
                  "endLine": 57,
                  "endColumn": 69,
                  "snippet": {
                    "text": "                            return j['compile_status'] == 'Complete'"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7ff5c7cccf02177b68bbf174719292e2164379421bbcf7ca28df3bbbbe258bcca4fab2b93aad2025ea3a2f68bb1a55c33d80bd58e97dc71c6168ab8976e67b6b_2"
          },
          "properties": {}
        },
        {
          "ruleId": "741f47d1-3730-3214-b1ab-8772e147cc55",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/compile.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 9,
                  "endLine": 69,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        exec(exec_string, globals()) # importlib code path miss things"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f5e316af02f5e033ffcadee9945d6c06e69f52ea61fac49f1a85af82da452aa04a9a2d64faf10762bacc20c44c00cf6c2d4cfea9e3a413fd090cf8ec43d4f30a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0197f4ce-b8f4-3d6f-864c-56766424a7be",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/compile.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 15,
                  "endLine": 72,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        mod = globals()[arg_path.stem]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "de8d2eef9826a8308f80b666c127b59b9e5ef517ff5c5414d759b894ba67d573db6e4f0add220a6734568f2e4e576787fb6e2ed414ec9654e5e171e4b5354a72_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9516c8a1-e896-3e34-99f3-82ef98a405e6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/kernel/kdesc.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 72,
                  "endLine": 96,
                  "endColumn": 79,
                  "snippet": {
                    "text": "        self._perf_cfields = sorted(self._perf_cfields, key=lambda p : p.nbits, reverse=True)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5ff3906377ae5115f7b66c2c8d4692ec85de95502ba2abdc313ea99668691036488c09c7f6f99d729b3022dd62e5dcd1fcbe4e950b8b416f569d56664ae54579_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3c4b57b3-4d68-3248-af6c-5fd06a957cc2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/rules/flash/aiter_bwd.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 28,
                  "endLine": 20,
                  "endColumn": 65,
                  "snippet": {
                    "text": "match_fwd = lambda aname : get_possible_choices(attn_fwd, aname)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f9894ef2691f95a2f70e661c8409ffc1164f515a7d12b8d3e6483ddca9958d39c982bd3bcf2e2681bad63763372108ddcaaeefa4b666b0c9b5c1addedf22f2e0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f2f90f87-df90-3a8e-99c1-2e151a744d81",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/rules/flash/aiter_bwd.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 30,
                  "endLine": 75,
                  "endColumn": 64,
                  "snippet": {
                    "text": "        'Q' : lambda dtype : 'fp16' in dtype or 'bf16' in dtype,"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f9894ef2691f95a2f70e661c8409ffc1164f515a7d12b8d3e6483ddca9958d39c982bd3bcf2e2681bad63763372108ddcaaeefa4b666b0c9b5c1addedf22f2e0_1"
          },
          "properties": {}
        },
        {
          "ruleId": "a1297009-fb01-38b4-9e93-aab5fe4e4fb9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/rules/flash/aiter_bwd.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 37,
                  "endLine": 76,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        'BLOCK_DMODEL' : lambda x : x in [64, 128, 192],        # Note: asm kernel only have 3 hdim variants"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f9894ef2691f95a2f70e661c8409ffc1164f515a7d12b8d3e6483ddca9958d39c982bd3bcf2e2681bad63763372108ddcaaeefa4b666b0c9b5c1addedf22f2e0_2"
          },
          "properties": {}
        },
        {
          "ruleId": "de4315b4-9052-38c3-8e49-5dd98d23fa42",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/rules/flash/aiter_bwd.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 34,
                  "endLine": 77,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        'BIAS_TYPE' : lambda b : b == 0,"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f9894ef2691f95a2f70e661c8409ffc1164f515a7d12b8d3e6483ddca9958d39c982bd3bcf2e2681bad63763372108ddcaaeefa4b666b0c9b5c1addedf22f2e0_3"
          },
          "properties": {}
        },
        {
          "ruleId": "4b10563a-a6a6-3c40-8396-06d20c0991d0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/rules/flash/aiter_bwd.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 45,
                  "endLine": 78,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        'ENABLE_DROPOUT' : lambda dropout : dropout == False,   # TODO: support dropout = True with validated PRNG"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f9894ef2691f95a2f70e661c8409ffc1164f515a7d12b8d3e6483ddca9958d39c982bd3bcf2e2681bad63763372108ddcaaeefa4b666b0c9b5c1addedf22f2e0_4"
          },
          "properties": {}
        },
        {
          "ruleId": "9c6a566c-092f-34cd-949b-01693edcf5cd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "code after return statement will not be executed"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/rules/flash/attn_fwd.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 9,
                  "endLine": 71,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        return\n        '''\n        # tuned_kernel['BLOCK_M'] //= 2\n        # tuned_kernel['BLOCK_N'] //= 2\n        square = min(tuned_kernel['BLOCK_M'], tuned_kernel['BLOCK_N'])\n        tuned_kernel['BLOCK_M'] = square // 2\n        tuned_kernel['BLOCK_N'] = square // 2\n        tuned_kernel['pre_load_v'] = False\n        tuned_kernel['waves_per_eu'] = 0\n        compiler_options['num_stages'] = 2\n        '''"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f11ac0db994c7dded8b5877fbe2452a5a86fa0d419cd09d2e1e248c76caabdb416b140e2a36c162eb05cb4b07c868f597a7bc5bb1f5e16d09d5c74dc78a5bbaf_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ecb59fe3-6f7b-3711-8fbf-1bbfa77a2eb1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/rules/flash/bwd_kernel_dk_dv.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 28,
                  "endLine": 18,
                  "endColumn": 65,
                  "snippet": {
                    "text": "match_fwd = lambda aname : get_possible_choices(attn_fwd, aname)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c2b96d93d0ca6a071c4f0baea8b2db587cf3f262d5fd41f9b417db9ae2efb57d4d085c014c3e06a5e1ff3634737f59616eaf13d61b98757d385840866c5bd577_0"
          },
          "properties": {}
        },
        {
          "ruleId": "77e19c73-4cc8-3a9d-af50-f91742b4048a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/rules/flash/bwd_kernel_dq.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 27,
                  "endLine": 18,
                  "endColumn": 65,
                  "snippet": {
                    "text": "match_op = lambda aname : get_possible_choices(OpAttnBwd, aname)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c126e11b1d069a5d99c7e9c11dbe3138026d1c2704c7756a17f37fba094df1793274051c7105c97da99efef84c11189deaa9db66f546f07c6f10d8b4912b448d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1fa11db5-d79a-3534-aa05-ccd70f4ee0be",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/rules/flash/bwd_kernel_dq.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 27,
                  "endLine": 19,
                  "endColumn": 72,
                  "snippet": {
                    "text": "match_kv = lambda aname : get_possible_choices(bwd_kernel_dk_dv, aname)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c126e11b1d069a5d99c7e9c11dbe3138026d1c2704c7756a17f37fba094df1793274051c7105c97da99efef84c11189deaa9db66f546f07c6f10d8b4912b448d_1"
          },
          "properties": {}
        },
        {
          "ruleId": "ad16a31b-12b2-3637-ad97-e46f873fad75",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/rules/flash/bwd_kernel_fuse.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 28,
                  "endLine": 18,
                  "endColumn": 65,
                  "snippet": {
                    "text": "match_fwd = lambda aname : get_possible_choices(attn_fwd, aname)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0f09875f7ee308e4c067fbdebf069ff9da7a3495648cf542657d90133b1393a7796b515e92cc09a0655e4294ed93e2f18f621951beb85e77baf86e7b3dc3a09c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d1d93400-f810-32ea-8c5a-0c363e99c78d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/rules/flash/bwd_kernel_fuse.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 37,
                  "endLine": 63,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        'BLOCK_DMODEL' : lambda x : x <= 256,"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0f09875f7ee308e4c067fbdebf069ff9da7a3495648cf542657d90133b1393a7796b515e92cc09a0655e4294ed93e2f18f621951beb85e77baf86e7b3dc3a09c_1"
          },
          "properties": {}
        },
        {
          "ruleId": "c8d655c9-88f0-3b03-bffd-6b6f04a458b5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/rules/flash/bwd_postprocess.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 30,
                  "endLine": 27,
                  "endColumn": 64,
                  "snippet": {
                    "text": "        'Q' : lambda dtype : 'fp16' in dtype or 'bf16' in dtype,"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1e2b716f45c1415ed1d84011835e516d0f3c991d2b5e3c46a0bee46e4279138e86b63d625604ee8499c76537ec1bdc8a36c04498ffdc7ca601da8cac0221b30a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e9097d55-6079-360d-b1fb-937d037958c0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/rules/flash/bwd_preprocess.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 27,
                  "endLine": 7,
                  "endColumn": 65,
                  "snippet": {
                    "text": "match_op = lambda aname : get_possible_choices(OpAttnBwd, aname)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c5086a52ff14b79133b088b3880c1b4d6302ee88bc951490a5757caf832b875865f4f1447f9c8bf398de19886d3ceb47f6a8f61142b71b9260d908f0e93bbb4c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "93c038f2-7477-388e-8b49-0c9b748e819e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/rules/flash/op_attn_bwd.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 32,
                  "endLine": 76,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    match_fwd = lambda aname : get_possible_choices(OpAttnFwd, aname)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2da686d9713671bc459dffd2ff4f84bbb5d8e6abc973d29c5c0bba80c2b59194758820c2b49ca3367719d0b8cdbf0699f895665f4d17cca11d41fcdbdd4c40d9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "abbb72b7-e178-33cf-9c2e-e8113fbca646",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/rules/flash/op_attn_fwd.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 35,
                  "endLine": 18,
                  "endColumn": 79,
                  "snippet": {
                    "text": "_IF_DROPOUT = lambda elsechoice : [CC('ENABLE_DROPOUT', False, 0, elsechoice)]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "928109974fbc1946a9af862aba712294e385e883a8a93181c8ac9c288bcc9a76701a8ac18995533a359429991b6d17672d2bffaa34eb260a2f52d2e27a902f32_0"
          },
          "properties": {}
        },
        {
          "ruleId": "cb509f3c-c5da-36b2-b789-0774ca93f655",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/rules/flash/op_attn_fwd.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 34,
                  "endLine": 19,
                  "endColumn": 71,
                  "snippet": {
                    "text": "_IF_CAUSAL = lambda elsechoice : [CC('CAUSAL_TYPE', 0, 0, elsechoice)]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "928109974fbc1946a9af862aba712294e385e883a8a93181c8ac9c288bcc9a76701a8ac18995533a359429991b6d17672d2bffaa34eb260a2f52d2e27a902f32_1"
          },
          "properties": {}
        },
        {
          "ruleId": "8e479fcf-83ac-3cfa-8e5a-e57db79f0de9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`pass` is the body of function _nolog. Consider removing this or raise NotImplementedError() if this is a TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3python/utils/log.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 9,
                  "snippet": {
                    "text": "def _nolog(*objects, sep=' ', end='\\n', file=None, flush=False):\n    pass"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "769b04973b5d7926eb4c695bab099c005a0e4fce83f3672df4526044e155ee1a3a673d7214c28b542f6f2b5f33d3538e870ff8d0ba4d18823adcc771ca2b414e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0a1cd498-7480-38d3-aea3-8ed3fec6d2ce",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3src/flash/aiter_bwd.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 490,
                  "startColumn": 5,
                  "endLine": 490,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    fprintf(stderr, \"hexdump: %08p\\n\", buf);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "285657b70df82074648b38e086ff59ccbfe4d843aed3bcab911fef39392f0c7236fc2e37037bce27b2816a5fc040ad4a497c90962d8a50ace66268cbdff8d9ba_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1e7421a4-2bd6-352c-bced-134aca0195e4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3src/flash/aiter_bwd.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 492,
                  "startColumn": 7,
                  "endLine": 492,
                  "endColumn": 35,
                  "snippet": {
                    "text": "      fprintf(stderr, \"%06x: \", i);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f3ad426ed27cb6845fb01493f727c8a4e9b764f50c7045b527f65bdbe1269a3ce194e05f38a6f8cfbb4672b61fac51911e27b8188ae862993c4fa2b11981a731_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4ff5eac6-84b8-398c-af29-bcbeeecc0053",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3src/flash/aiter_bwd.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 495,
                  "startColumn": 11,
                  "endLine": 495,
                  "endColumn": 45,
                  "snippet": {
                    "text": "          fprintf(stderr, \"%02x \", buf[i+j]);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f242dd1099fb511fce763facfc56972a328310e5692ce5babd36f086c3203039c1212997e6a7228feadf7a300ccf7608c890290f875e0f6dfedd4ab02eb0c9f0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "84f5cd1f-21f5-3783-80e1-019e247311f9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3src/flash/aiter_bwd.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 506,
                  "startColumn": 3,
                  "endLine": 506,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  fprintf(stderr, \"Union %p\\n\", &union_of_args);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0044ed404f3b44839fe036cb8a0da3d274352daae69d23cd782c769446c68bf1a70273befdb16886d5de86c58d2ba02fc8061c06c2ed5cf9dabf66c2ebddaeb9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0d0e0c12-a9c1-366c-8a25-e105f80e9ca6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3src/flash/aiter_bwd.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 507,
                  "startColumn": 3,
                  "endLine": 507,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  fprintf(stderr, \"Union %p\\n\", &union_of_args.fmha_bwd_v3_args);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0044ed404f3b44839fe036cb8a0da3d274352daae69d23cd782c769446c68bf1a70273befdb16886d5de86c58d2ba02fc8061c06c2ed5cf9dabf66c2ebddaeb9_1"
          },
          "properties": {}
        },
        {
          "ruleId": "2c3e357c-7783-380a-973b-f1269a9f8113",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3src/flash/aiter_bwd.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 508,
                  "startColumn": 3,
                  "endLine": 508,
                  "endColumn": 69,
                  "snippet": {
                    "text": "  fprintf(stderr, \"Union %p\\n\", &union_of_args.fmha_bwd_v3_gen_args);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0044ed404f3b44839fe036cb8a0da3d274352daae69d23cd782c769446c68bf1a70273befdb16886d5de86c58d2ba02fc8061c06c2ed5cf9dabf66c2ebddaeb9_2"
          },
          "properties": {}
        },
        {
          "ruleId": "ad5cf389-57a4-3a1b-bed2-02456ab0c8ff",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3src/flash/aiter_bwd.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 509,
                  "startColumn": 3,
                  "endLine": 509,
                  "endColumn": 70,
                  "snippet": {
                    "text": "  fprintf(stderr, \"Union %p\\n\", &union_of_args.fmha_bwd_v3_genl_args);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0044ed404f3b44839fe036cb8a0da3d274352daae69d23cd782c769446c68bf1a70273befdb16886d5de86c58d2ba02fc8061c06c2ed5cf9dabf66c2ebddaeb9_3"
          },
          "properties": {}
        },
        {
          "ruleId": "8a6bdd85-a20e-366b-b386-564b7b55062d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3src/packed_kernel_common.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 16,
                  "endLine": 87,
                  "endColumn": 42,
                  "snippet": {
                    "text": "  int aks2fd = fd_open(utf8_path.c_str());"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c38be3ce85f03d73162e6e6ec37c9b5bf739947b4795eecc2054baaed992d5b51f6174cbd91229f8d36a698b591073614fdf9360aaadd7629f3cad4b07081de4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "964afee2-c411-3cd3-9d4c-344825ab0b97",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3src/packed_kernel_common.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 22,
                  "endLine": 152,
                  "endColumn": 63,
                  "snippet": {
                    "text": "  auto header_read = fd_read(fd, &header, sizeof(AKS2_Header));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d11faef9ede268a828a364ec9fe6cbf8989ce5e094108e2316530cc68cb42653fdc3167031ccafc8690eb64315f5966aaa37d55d6452ab184f437c080c2e3cc1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "826a352c-01d7-3eef-8601-75ea359d3e01",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3src/packed_kernel_common.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 21,
                  "endLine": 178,
                  "endColumn": 61,
                  "snippet": {
                    "text": "      auto rbytes = fd_read(fd, inbuf, AOTRITON_LZMA_BUFSIZ);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d11faef9ede268a828a364ec9fe6cbf8989ce5e094108e2316530cc68cb42653fdc3167031ccafc8690eb64315f5966aaa37d55d6452ab184f437c080c2e3cc1_1"
          },
          "properties": {}
        },
        {
          "ruleId": "744dd55f-68ff-3e24-b3b2-da33e98a938b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3src/triton_kernel.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 5,
                  "endLine": 189,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    fprintf(stderr, \"hexdump: %08p\\n\", buf);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ab1e64817aa71684a92853a9d7794a142731f9e6c2abe6f3d1749f9099c8f87236b2a9b56d0660d8a1ffc7d655c4d64bb2c121036f0a10a8544d94887b4d495a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7dd39412-4f3a-32b0-b358-6445f258af24",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3src/triton_kernel.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 7,
                  "endLine": 191,
                  "endColumn": 35,
                  "snippet": {
                    "text": "      fprintf(stderr, \"%06x: \", i);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6969dbfbe76d8d6b7519b00685bf0bd8b14d041bc8b3809ba1684b97f1e0826700ad7918520386a804ee9a6f1a659234d9ca13d9d5a0cd1cc2ef22958f383a85_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b1d95373-78cb-3a3e-9ab1-5ae12d858a22",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3src/triton_kernel.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 22,
                  "endLine": 237,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  const unsigned int errbufsize = 8192;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "aed4cfd57f0c3cea8b4369c8fbf4cc75a0566410a987e9796ee147e9466ec00e9fb2eb489f96173167867519b5b8a1d57a06c3df37fba45a182621695e5ba4b5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "33cd1dd1-1052-3395-963c-8668723d1c16",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3src/triton_kernel.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 11,
                  "endLine": 194,
                  "endColumn": 45,
                  "snippet": {
                    "text": "          fprintf(stderr, \"%02x \", buf[i+j]);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "713d84754a0a56c9d4e083645889cc95be23a06f53cb209f30ca42204056d80729645a15e6dbe24ebf0e8c966e7d9014fc58d065672691634da6ac44b00a30d6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "399d63c9-4e52-387f-81e3-5fd446bbaffd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "v3src/triton_kernel.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 22,
                  "endLine": 238,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  const unsigned int logbufsize = 8192;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "05c73875931c74fa924aedcf91796c7a78e2a89b42b5cba4d2ef25a7b96c05950c9c77889352f352ff27d8cf2014f84047992ae2ea8c9786cb0f33fc6d350a64_0"
          },
          "properties": {}
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}